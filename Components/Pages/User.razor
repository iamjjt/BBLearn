@page "/user"
@using BlazorLearWebApp.Entity
@inject IDataService<UserEntity> _dataService
@inject SwalService SwalService
@attribute [TabItemOption(Text = "用户管理", Icon = "fa-solid fa-user")]
<AdminTable TItem="UserEntity" OnSaveAsync="OnSaveAsync">
    <TableColumns>
        <TableColumn @bind-Field="@context.UserName" IsReadonlyWhenEdit="true"></TableColumn>
        <TableColumn @bind-Field="@context.NickName"></TableColumn>
        <TableColumn @bind-Field="@context.RoleId" Text="角色" Lookup="Roles"></TableColumn>
    </TableColumns>
    <RowButtonTemplate Context="value">
        <TableCellPopconfirmButton Text="重置密码" Content=@($"您确定要重置 ({value.UserName}) 的密码吗?") OnConfirm="()=>ResetPassword(value)"></TableCellPopconfirmButton>    
    </RowButtonTemplate>
</AdminTable>

@code {
    private List<SelectedItem>? Roles { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Roles = RoleEntity.Select.ToList(x => new SelectedItem(x.Id.ToString(), x.RoleName!));
    }

    private async Task<bool> OnSaveAsync(UserEntity arg1, ItemChangedType arg2)
    {
        if (arg2 == ItemChangedType.Add)
        {
            arg1.Password = "123456";
        }
        var ret =  await  _dataService.SaveAsync(arg1,arg2);

        if (ret && arg2 == ItemChangedType.Add)
        {
            await SwalService.Show(new SwalOption()
            {
                Title = "添加成功",
                Content = $"用户添加成功,初始密码为123456",
                Category = SwalCategory.Success,
            });
        }
        return ret;
    }

    private async Task ResetPassword(UserEntity user)
    {
        user.Password = "123456";
        await user.SaveAsync();
        await SwalService.Show(new SwalOption()
        {
            Title = "密码重置成功",
            Content = $"用户密码重置已经重置为初始密码123456",
            Category = SwalCategory.Success,
        });
    }

}