@using System.Diagnostics.CodeAnalysis
@implements IResultDialog

@if (EditRole != null)
{
    @EditRole.RoleName
}
else
{
    <span>未选择角色</span>
}


<TreeView TItem="MenuEntity" Items="MenuTreeData" ShowIcon="true" ShowCheckbox="true" AutoCheckParent="true" AutoCheckChildren="true"></TreeView>

@code {
   
    public List<TreeViewItem<MenuEntity>> MenuTreeData { get; set; } = [];
    
    [Parameter]public int RoleId { get; set; }
    
    private RoleEntity? EditRole { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EditRole = await RoleEntity.Where(x => x.Id == RoleId).IncludeMany(x=>x.Menus).FirstAsync();
        await base.OnInitializedAsync();
        await  RefreshData();
    }

    private async Task RefreshData()
    {
        MenuTreeData.Clear();
        var menus = await MenuEntity.Select.ToListAsync();
        MenuTreeData.AddRange(CascadingMenu(menus, null));
    }
    private List<TreeViewItem<MenuEntity>> CascadingMenu(List<MenuEntity> menus, TreeViewItem<MenuEntity>? parent)
    {
        return menus.Where(x => x.ParentId == (parent?.Value.Id??0))
            .Select(x =>
            {
                var item = new TreeViewItem<MenuEntity>(x)
                {
                    Text = x.MenuName,
                    IsExpand = true,
                    Icon = x.Icon,
                    Parent = parent
                };
                item.Items = CascadingMenu(menus, item);
                if (EditRole.Menus.Any(y => y.Id == x.Id) == true)
                {
                    item.CheckedState = CheckboxState.Checked;
                }
                return item;
            }).ToList();
    }

    public async Task OnClose(DialogResult result)
    {
        if (result == DialogResult.Yes)
        {
            var menus = new List<MenuEntity>();
            GetMenus(MenuTreeData.Where(x=>x.CheckedState!= CheckboxState.UnChecked), menus);
            EditRole.Menus = menus;
            await EditRole.SaveManyAsync(nameof(RoleEntity.Menus));
        }
        
    }

    private void GetMenus(IEnumerable<TreeViewItem<MenuEntity>> treeViewItems, List<MenuEntity> menus)
    {
        menus.AddRange(treeViewItems.Select(x=>x.Value));
        foreach (var item in treeViewItems)
        {
            if (item.Items.Any(x => x.CheckedState != CheckboxState.UnChecked))
            {
                GetMenus(item.Items.Where(x=>x.CheckedState!=CheckboxState.UnChecked),menus);
            }
        }
    }

}